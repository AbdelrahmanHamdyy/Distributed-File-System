// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: grpc/master.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MasterTrackerService_Heartbeat_FullMethodName    = "/master.MasterTrackerService/Heartbeat"
	MasterTrackerService_UploadFile_FullMethodName   = "/master.MasterTrackerService/UploadFile"
	MasterTrackerService_RegisterFile_FullMethodName = "/master.MasterTrackerService/RegisterFile"
	MasterTrackerService_DownloadFile_FullMethodName = "/master.MasterTrackerService/DownloadFile"
)

// MasterTrackerServiceClient is the client API for MasterTrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterTrackerServiceClient interface {
	// Heartbeat service for DataNode
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Upload file service for DataNode
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// Register service for DataNode
	RegisterFile(ctx context.Context, in *RegisterFileRequest, opts ...grpc.CallOption) (*RegisterFileResponse, error)
	// Download file service for Client
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
}

type masterTrackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterTrackerServiceClient(cc grpc.ClientConnInterface) MasterTrackerServiceClient {
	return &masterTrackerServiceClient{cc}
}

func (c *masterTrackerServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, MasterTrackerService_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, MasterTrackerService_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerServiceClient) RegisterFile(ctx context.Context, in *RegisterFileRequest, opts ...grpc.CallOption) (*RegisterFileResponse, error) {
	out := new(RegisterFileResponse)
	err := c.cc.Invoke(ctx, MasterTrackerService_RegisterFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, MasterTrackerService_DownloadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterTrackerServiceServer is the server API for MasterTrackerService service.
// All implementations must embed UnimplementedMasterTrackerServiceServer
// for forward compatibility
type MasterTrackerServiceServer interface {
	// Heartbeat service for DataNode
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Upload file service for DataNode
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	// Register service for DataNode
	RegisterFile(context.Context, *RegisterFileRequest) (*RegisterFileResponse, error)
	// Download file service for Client
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	mustEmbedUnimplementedMasterTrackerServiceServer()
}

// UnimplementedMasterTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterTrackerServiceServer struct {
}

func (UnimplementedMasterTrackerServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedMasterTrackerServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMasterTrackerServiceServer) RegisterFile(context.Context, *RegisterFileRequest) (*RegisterFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFile not implemented")
}
func (UnimplementedMasterTrackerServiceServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedMasterTrackerServiceServer) mustEmbedUnimplementedMasterTrackerServiceServer() {}

// UnsafeMasterTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterTrackerServiceServer will
// result in compilation errors.
type UnsafeMasterTrackerServiceServer interface {
	mustEmbedUnimplementedMasterTrackerServiceServer()
}

func RegisterMasterTrackerServiceServer(s grpc.ServiceRegistrar, srv MasterTrackerServiceServer) {
	s.RegisterService(&MasterTrackerService_ServiceDesc, srv)
}

func _MasterTrackerService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTrackerService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTrackerService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTrackerService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTrackerService_RegisterFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServiceServer).RegisterFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTrackerService_RegisterFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServiceServer).RegisterFile(ctx, req.(*RegisterFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTrackerService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTrackerService_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServiceServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterTrackerService_ServiceDesc is the grpc.ServiceDesc for MasterTrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterTrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.MasterTrackerService",
	HandlerType: (*MasterTrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _MasterTrackerService_Heartbeat_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _MasterTrackerService_UploadFile_Handler,
		},
		{
			MethodName: "RegisterFile",
			Handler:    _MasterTrackerService_RegisterFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _MasterTrackerService_DownloadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/master.proto",
}
