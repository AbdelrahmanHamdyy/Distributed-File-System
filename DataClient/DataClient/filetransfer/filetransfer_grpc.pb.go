// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: filetransfer.proto

package filetransfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortNumberService_SendPortNumber_FullMethodName = "/filetransfer.PortNumberService/SendPortNumber"
)

// PortNumberServiceClient is the client API for PortNumberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortNumberServiceClient interface {
	SendPortNumber(ctx context.Context, in *PortNumberRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type portNumberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortNumberServiceClient(cc grpc.ClientConnInterface) PortNumberServiceClient {
	return &portNumberServiceClient{cc}
}

func (c *portNumberServiceClient) SendPortNumber(ctx context.Context, in *PortNumberRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, PortNumberService_SendPortNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortNumberServiceServer is the server API for PortNumberService service.
// All implementations must embed UnimplementedPortNumberServiceServer
// for forward compatibility
type PortNumberServiceServer interface {
	SendPortNumber(context.Context, *PortNumberRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedPortNumberServiceServer()
}

// UnimplementedPortNumberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortNumberServiceServer struct {
}

func (UnimplementedPortNumberServiceServer) SendPortNumber(context.Context, *PortNumberRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPortNumber not implemented")
}
func (UnimplementedPortNumberServiceServer) mustEmbedUnimplementedPortNumberServiceServer() {}

// UnsafePortNumberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortNumberServiceServer will
// result in compilation errors.
type UnsafePortNumberServiceServer interface {
	mustEmbedUnimplementedPortNumberServiceServer()
}

func RegisterPortNumberServiceServer(s grpc.ServiceRegistrar, srv PortNumberServiceServer) {
	s.RegisterService(&PortNumberService_ServiceDesc, srv)
}

func _PortNumberService_SendPortNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortNumberServiceServer).SendPortNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortNumberService_SendPortNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortNumberServiceServer).SendPortNumber(ctx, req.(*PortNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortNumberService_ServiceDesc is the grpc.ServiceDesc for PortNumberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortNumberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filetransfer.PortNumberService",
	HandlerType: (*PortNumberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPortNumber",
			Handler:    _PortNumberService_SendPortNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filetransfer.proto",
}

const (
	SuccessService_ReportSuccess_FullMethodName = "/filetransfer.SuccessService/ReportSuccess"
)

// SuccessServiceClient is the client API for SuccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuccessServiceClient interface {
	ReportSuccess(ctx context.Context, in *SuccessRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type successServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuccessServiceClient(cc grpc.ClientConnInterface) SuccessServiceClient {
	return &successServiceClient{cc}
}

func (c *successServiceClient) ReportSuccess(ctx context.Context, in *SuccessRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, SuccessService_ReportSuccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuccessServiceServer is the server API for SuccessService service.
// All implementations must embed UnimplementedSuccessServiceServer
// for forward compatibility
type SuccessServiceServer interface {
	ReportSuccess(context.Context, *SuccessRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedSuccessServiceServer()
}

// UnimplementedSuccessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSuccessServiceServer struct {
}

func (UnimplementedSuccessServiceServer) ReportSuccess(context.Context, *SuccessRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSuccess not implemented")
}
func (UnimplementedSuccessServiceServer) mustEmbedUnimplementedSuccessServiceServer() {}

// UnsafeSuccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuccessServiceServer will
// result in compilation errors.
type UnsafeSuccessServiceServer interface {
	mustEmbedUnimplementedSuccessServiceServer()
}

func RegisterSuccessServiceServer(s grpc.ServiceRegistrar, srv SuccessServiceServer) {
	s.RegisterService(&SuccessService_ServiceDesc, srv)
}

func _SuccessService_ReportSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuccessServiceServer).ReportSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuccessService_ReportSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuccessServiceServer).ReportSuccess(ctx, req.(*SuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuccessService_ServiceDesc is the grpc.ServiceDesc for SuccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filetransfer.SuccessService",
	HandlerType: (*SuccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportSuccess",
			Handler:    _SuccessService_ReportSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filetransfer.proto",
}
